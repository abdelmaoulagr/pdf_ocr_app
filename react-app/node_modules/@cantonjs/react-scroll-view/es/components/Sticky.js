var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import createStyles from './Sticky.styles';
import React, { Component, isValidElement } from 'react';
import PropTypes from 'prop-types';
import { stickyNodeType } from '../PropTypes';
import { StickyContext } from '../Contexts';
import Fixed from './Fixed';

var Sticky = function (_Component) {
	_inherits(Sticky, _Component);

	function Sticky() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Sticky);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Sticky.__proto__ || Object.getPrototypeOf(Sticky)).call.apply(_ref, [this].concat(args))), _this), _this.styles = createStyles(), _this.saveDOMNode = function (dom) {
			if (dom && !_this.dom && _this.stickyContext) {
				var _dom$getBoundingClien = dom.getBoundingClientRect(),
				    height = _dom$getBoundingClien.height;

				_this.stickyContext.setStickyStyle({ height: height });
			}
			_this.dom = dom;
		}, _this.renderChildren = function (stickyContext) {
			_this.stickyContext = stickyContext;
			var _this2 = _this,
			    style = _this2.props.style,
			    position = _this2.stickyContext.position,
			    styles = _this2.styles;

			if (position === 'fixed') {
				return React.createElement(
					Fixed,
					null,
					React.createElement(
						'div',
						{ ref: _this.saveDOMNode, style: styles.fixed(style) },
						_this.returnChildren(position)
					)
				);
			} else {
				var topOrBottom = position;
				return React.createElement(
					'div',
					{ ref: _this.saveDOMNode, style: styles.relative(style, topOrBottom) },
					_this.returnChildren(position)
				);
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Sticky, [{
		key: 'returnChildren',
		value: function returnChildren(position) {
			var children = this.props.children;

			return isValidElement(children) ? children : children(position);
		}
	}, {
		key: 'render',
		value: function render() {
			return React.createElement(
				StickyContext.Consumer,
				null,
				this.renderChildren
			);
		}
	}]);

	return Sticky;
}(Component);

Sticky.propTypes = {
	children: stickyNodeType,
	style: PropTypes.object
};
export default Sticky;