'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Sticky = require('./Sticky.styles');

var _Sticky2 = _interopRequireDefault(_Sticky);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _PropTypes = require('../PropTypes');

var _Contexts = require('../Contexts');

var _Fixed = require('./Fixed');

var _Fixed2 = _interopRequireDefault(_Fixed);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Sticky = function (_Component) {
	_inherits(Sticky, _Component);

	function Sticky() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Sticky);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Sticky.__proto__ || Object.getPrototypeOf(Sticky)).call.apply(_ref, [this].concat(args))), _this), _this.styles = (0, _Sticky2.default)(), _this.saveDOMNode = function (dom) {
			if (dom && !_this.dom && _this.stickyContext) {
				var _dom$getBoundingClien = dom.getBoundingClientRect(),
				    height = _dom$getBoundingClien.height;

				_this.stickyContext.setStickyStyle({ height: height });
			}
			_this.dom = dom;
		}, _this.renderChildren = function (stickyContext) {
			_this.stickyContext = stickyContext;
			var _this2 = _this,
			    style = _this2.props.style,
			    position = _this2.stickyContext.position,
			    styles = _this2.styles;

			if (position === 'fixed') {
				return _react2.default.createElement(
					_Fixed2.default,
					null,
					_react2.default.createElement(
						'div',
						{ ref: _this.saveDOMNode, style: styles.fixed(style) },
						_this.returnChildren(position)
					)
				);
			} else {
				var topOrBottom = position;
				return _react2.default.createElement(
					'div',
					{ ref: _this.saveDOMNode, style: styles.relative(style, topOrBottom) },
					_this.returnChildren(position)
				);
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Sticky, [{
		key: 'returnChildren',
		value: function returnChildren(position) {
			var children = this.props.children;

			return (0, _react.isValidElement)(children) ? children : children(position);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_Contexts.StickyContext.Consumer,
				null,
				this.renderChildren
			);
		}
	}]);

	return Sticky;
}(_react.Component);

Sticky.propTypes = {
	children: _PropTypes.stickyNodeType,
	style: _propTypes2.default.object
};
exports.default = Sticky;