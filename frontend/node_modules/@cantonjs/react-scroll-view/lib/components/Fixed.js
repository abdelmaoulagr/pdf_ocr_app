'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Contexts = require('../Contexts');

var _util = require('../util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Fixed = function (_Component) {
	_inherits(Fixed, _Component);

	function Fixed(props) {
		_classCallCheck(this, Fixed);

		var _this = _possibleConstructorReturn(this, (Fixed.__proto__ || Object.getPrototypeOf(Fixed)).call(this, props));

		_this.renderChildren = function (fixedContext) {
			_this.fixedContext = fixedContext;
			return null;
		};

		_this.fixedId = (0, _util.createId)();
		return _this;
	}

	_createClass(Fixed, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.renderInContext();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(_ref) {
			var children = _ref.children;

			if (children !== this.props.children) {
				this.renderInContext();
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.fixedContext.unmount(this.fixedId);
		}
	}, {
		key: 'renderInContext',
		value: function renderInContext() {
			var fixedContext = this.fixedContext,
			    fixedId = this.fixedId,
			    children = this.props.children;

			if (fixedContext.render) {
				fixedContext.render((0, _react.cloneElement)(_react.Children.only(children), { key: fixedId }));
			}
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				_Contexts.FixedContext.Consumer,
				null,
				this.renderChildren
			);
		}
	}]);

	return Fixed;
}(_react.Component);

Fixed.propTypes = {
	children: _propTypes2.default.node
};
exports.default = Fixed;