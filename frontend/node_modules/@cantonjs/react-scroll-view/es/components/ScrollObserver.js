var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { ObserverContext } from '../Contexts';
import Intersection from '../Intersection';
import { forwardRef } from '../util';
import { refType, thresholdType } from '../PropTypes';

var ScrollObserver = function (_Component) {
	_inherits(ScrollObserver, _Component);

	function ScrollObserver() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ScrollObserver);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ScrollObserver.__proto__ || Object.getPrototypeOf(ScrollObserver)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ScrollObserver, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this2 = this;

			var onEnter = this.onEnter,
			    onLeave = this.onLeave,
			    dom = this.dom,
			    _props = this.props,
			    rootMargin = _props.rootMargin,
			    threshold = _props.threshold,
			    onIntersect = _props.onIntersect,
			    debugId = _props.debugId;

			process.nextTick(function () {
				var intersection = new Intersection({
					onEnter: onEnter,
					onLeave: onLeave,
					onIntersect: onIntersect,
					debugId: debugId
				});
				if (dom) {
					var options = { rootMargin: rootMargin, threshold: threshold };
					_this2.observer.observe(dom, intersection, options);
				}
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var dom = this.dom;

			if (dom) this.observer.unobserve(dom);
		}
	}, {
		key: 'render',
		value: function render() {
			return React.createElement(
				ObserverContext.Consumer,
				null,
				this.renderChildren
			);
		}
	}]);

	return ScrollObserver;
}(Component);

ScrollObserver.propTypes = {
	children: PropTypes.func.isRequired,
	onEnter: PropTypes.func,
	onLeave: PropTypes.func,
	onIntersect: PropTypes.func,
	rootMargin: PropTypes.string,
	threshold: thresholdType,
	innerRef: refType,
	debugId: PropTypes.string
};

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.state = {
		isIntersecting: false,
		ref: function ref(dom) {
			forwardRef(_this3.props.innerRef, dom);
			_this3.dom = dom;
		}
	};

	this.onEnter = function () {
		var isIntersecting = _this3.state.isIntersecting,
		    onEnter = _this3.props.onEnter;

		!isIntersecting && _this3.setState({ isIntersecting: true });
		onEnter && onEnter.apply(undefined, arguments);
	};

	this.onLeave = function () {
		var isIntersecting = _this3.state.isIntersecting,
		    onLeave = _this3.props.onLeave;

		isIntersecting && _this3.setState({ isIntersecting: false });
		onLeave && onLeave.apply(undefined, arguments);
	};

	this.renderChildren = function (observer) {
		var state = _this3.state,
		    children = _this3.props.children;

		_this3.observer = observer;
		return children(state);
	};
};

export default ScrollObserver;