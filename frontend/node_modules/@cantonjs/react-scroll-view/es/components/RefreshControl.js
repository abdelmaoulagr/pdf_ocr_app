var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import createStyles from './RefreshControl.styles';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Arrow from './Arrow';
import Loading from './Loading';
import RefreshControlObserver from './RefreshControlObserver';

var RefreshControl = function (_Component) {
	_inherits(RefreshControl, _Component);

	function RefreshControl() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, RefreshControl);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RefreshControl.__proto__ || Object.getPrototypeOf(RefreshControl)).call.apply(_ref, [this].concat(args))), _this), _this.styles = createStyles(), _this.saveRef = function (refreshControl) {
			_this.refreshControl = refreshControl;
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(RefreshControl, [{
		key: 'requestRefresh',
		value: function requestRefresh() {
			var refreshControl = this.refreshControl;

			refreshControl && refreshControl.requestRefresh();
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    color = _props.color,
			    other = _objectWithoutProperties(_props, ['color']),
			    styles = this.styles;

			return React.createElement(
				RefreshControlObserver,
				_extends({}, other, { ref: this.saveRef }),
				function (_ref2) {
					var isRefreshing = _ref2.isRefreshing,
					    isActive = _ref2.isActive;
					return React.createElement(
						'div',
						{ style: styles.iconContainer },
						isRefreshing ? React.createElement(Loading, { color: color }) : React.createElement(Arrow, { color: color, style: styles.arrowIcon(isActive) })
					);
				}
			);
		}
	}]);

	return RefreshControl;
}(Component);

RefreshControl.propTypes = {
	isRefreshing: PropTypes.bool.isRequired,
	onRefresh: PropTypes.func,
	color: PropTypes.string,
	style: PropTypes.object
};
RefreshControl.defaultProps = {
	color: '#333'
};
export default RefreshControl;